This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
docker-compose.yml
Dockerfile
package.json
README.md
server.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Dependencies
node_modules/
package-lock.json
yarn.lock

# Build outputs
dist/
build/
*.js.map

# TypeScript
*.tsbuildinfo

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.*.local

# IDE/Editor specific
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Test coverage
coverage/
</file>

<file path="docker-compose.yml">
version: '3'
services:
  mcp-ping:
    build: .
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-ping.rule=Host(`mcp-ping.stuartmason.co.uk`)"
      - "traefik.http.services.mcp-ping.loadbalancer.server.port=3001"
      - "traefik.http.routers.mcp-ping.entrypoints=https"
      - "traefik.http.routers.mcp-ping.tls=true"
      - "traefik.http.routers.mcp-ping.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.gzip.compress=true"
      - "traefik.http.routers.mcp-ping.middlewares=gzip"
</file>

<file path="Dockerfile">
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1

CMD ["node", "server.js"]
</file>

<file path="package.json">
{
  "name": "mcp-second-brain",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.7.0",
    "express": "^5.0.1",
    "zod": "^3.24.2",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "@types/cors": "^2.8.17"
  }
}
</file>

<file path="README.md">
# MCP Ping Server

A simple server implementing the Model Context Protocol (MCP) over Server-Sent Events (SSE), providing a basic "ping" tool that responds with "pong".

## Overview

This project demonstrates a minimal implementation of an MCP server using SSE for communication. It's built with Node.js and Express, and can be deployed as a standalone service or using Docker.

The server implements:

- A simple "ping" tool that responds with "pong"
- SSE-based communication for real-time server-to-client messaging
- HTTP POST endpoint for client-to-server communication
- Health check endpoint for monitoring

## Prerequisites

- Node.js 18 or higher
- npm or yarn

## Installation

Clone the repository and install dependencies:

```bash
git clone https://github.com/yourusername/mcp-ping.git
cd mcp-ping
npm install
```

## Usage

### Running Locally

Start the server with:

```bash
npm start
```

The server will be available at http://localhost:3001.

### Docker Deployment

Build and run using Docker:

```bash
docker build -t mcp-ping .
docker run -p 3001:3001 mcp-ping
```

Or use Docker Compose:

```bash
docker-compose up
```

## API Endpoints

- `GET /sse`: Establishes an SSE connection for server-to-client communication
- `POST /messages`: Receives messages from clients
- `GET /health`: Health check endpoint that returns "OK" if the server is running

## MCP Tools

### ping

A simple tool that responds with "pong" when called.

**Parameters**: None

**Response**:
```json
{
  "content": [
    {
      "type": "text",
      "text": "pong"
    }
  ]
}
```

## Environment Variables

- `PORT`: The port on which the server will listen (default: 3001)

## Deployment

The included Docker Compose configuration is set up for deployment with Traefik as a reverse proxy, with automatic HTTPS certificate generation via Let's Encrypt.

## Development

This project uses:
- Express.js for the web server
- @modelcontextprotocol/sdk for MCP implementation
- Server-Sent Events (SSE) for real-time communication

## License

ISC
</file>

<file path="server.js">
import express from "express";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";
import cors from "cors";

// Create the simplest MCP server
const server = new McpServer({
  name: "ping-server",
  version: "1.0.0"
});

// Add a simple ping tool
server.tool(
  "ping",
  {},  // No parameters needed
  async () => ({
    content: [{ type: "text", text: "pong" }]
  })
);

// Set up Express with SSE transport
const app = express();
const port = process.env.PORT || 3001;

// Store active transports
let activeTransport = null;

// Enhanced CORS setup
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// SSE endpoint for server-to-client communication
app.get("/sse", (req, res) => {
  console.log("SSE connection attempt");
  
  // Create transport
  const transport = new SSEServerTransport("/messages", res);
  activeTransport = transport;
  
  // Connect server to transport
  server.connect(transport);
  console.log("SSE connection established");
  
  // Handle connection close
  req.on('close', () => {
    console.log("SSE connection closed");
    if (activeTransport === transport) {
      activeTransport = null;
    }
  });
});

// Message endpoint for client-to-server communication
app.post("/messages", (req, res) => {
  if (!activeTransport) {
    return res.status(503).send("SSE connection not established");
  }
  
  console.log("Received message from client");
  try {
    activeTransport.handlePostMessage(req, res);
  } catch (error) {
    console.error(`Error handling message: ${error.message}`);
    res.status(500).send(error.message);
  }
});

// Health check endpoint
app.get("/health", (req, res) => {
  res.status(200).send("OK");
});

// Start the server
app.listen(port, () => {
  console.log(`Ping server running at http://localhost:${port}`);
});
</file>

</files>
